class BankAccount:
    def __init__(self, owner, balance=0):
        # Initialize owner's name and balance
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        # Deposit funds into the account
        self.balance += amount
        print(f"Deposited {amount} into {self.owner}'s account.")

    def withdraw(self, amount):
        # Withdraw funds from the account
        if amount <= self.balance:
            self.balance -= amount
            print(f"Withdrew {amount} from {self.owner}'s account.")
        else:
            print("Insufficient funds!")

    def check_balance(self):
        # Check the current balance
        print(f"Current balance for {self.owner}'s account: {self.balance}")

# Test your class
# Create instances and test methods
account1 = BankAccount("John")
account1.check_balance()  # Should display "Current balance for John's account: 0"
account1.deposit(100)
account1.check_balance()  # Should display "Current balance for John's account: 100"
account1.withdraw(50)
account1.check_balance()  # Should display "Current balance for John's account: 50"
account1.withdraw(70)     # Should display "Insufficient funds!"


[EXERCISE 3]
"""Create a Python class called Employee to represent employees in a company. The class should have:

Instance variables to store the employee's name, salary, and employment year.
Methods to:
Initialize the employee with a given name, salary, and employment year.
Calculate the number of years the employee has been with the company (based on the current year).
Apply a salary raise by a certain percentage.
Print out the employee's information, including their name, current salary, and years of employment.
After defining the class, create a few instances of the Employee class and test its methods by calculating years of employment,
 applying salary raises, and printing out employee information."""


#[EXERCISE 2]
class Employee:

    def __init__(self, name, salary, emp_year):
        self.name = name
        self.salary = salary
        self.emp_year = emp_year


    def salary_raise1(self, raise1 = 1.5):
        return self.salary * raise1


    def salary_raise2(self, raise2 = 2.5):
        return self.salary * raise2


    def salary_raise3(self, raise3 = 7.5):
        return self.salary * raise3


    def employment_yrs(self, new_year):
        new_year = 2024 - self.emp_year


employee1 = Employee("uzoma", 100000, 2012)

print(employee1.salary_raise1())
print(employee1.salary_raise2())
print(employee1.salary_raise3())


---------------------------------------------------------------------------------------------------------------------

[[ DAY 6 ]]
"""write a function that takes an array of numbers and returns the sum of the numbers. The numbers can be negative.
 If the array doesn't contain any numbers then you can return 0"""

uzoma = [12,34,23,56,21,10]
onochie = []
chizzy = [-1,200,32,-18]

def add_array(x):
    new_arr = sum(x)
    print(new_arr)

    if x ==[]:
        print("this array is empty")

add_array(uzoma)
add_array(onochie)
add_array(chizzy)

..................................................................................................................

"""Write a Python program that takes a list of strings representing numbers (e.g., ['1', '2', '3']) and converts
each string to its corresponding integer value using the map() function. Then, print the resulting list of integers."""

string_numbers = ['1', '2', '3']

integer_numbers = list(map(int, string_numbers))

print(integer_numbers)
....................................................................................................................

"""Write a Python program that takes a list of numbers and uses the filter() function to filter out all the 
even numbers from the list. Then, print the resulting list containing only the odd numbers."""


users = [10,23,43,44,64,57,59,80,117,234,478,576,1001]
#To select even numbers
even_numbers = lambda x:x%2==0
#printing out even numbers
print(list(filter(even_numbers, users)))

-----------------------------------------------------------------------------------------------------------------------

